# Bazel will create symlinks from the workspace directory to output artifacts.
# Build results will be placed in a directory called "dist/bin"
# Other directories will be created like "dist/testlogs"
# Be aware that this will still create a bazel-out symlink in
# your project directory, which you must exclude from version control and your
# editor's search path.
build --symlink_prefix=dist/

# Use our custom-configured c++ toolchain.
#build:wasm --crosstool_top=//toolchain:emscripten

# Use --cpu as a differentiator.
#build:wasm --cpu=wasm

# Use the default C++ toolchain to build the tools used during the build.
#build:wasm --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

# These compile flags are active no matter which build mode we are in
# (dbg vs opt). For flags specific to build mode, see cc_toolchain_config.bzl.
build --cxxopt="-std=c++11"
build --cxxopt="-fno-rtti"
build --cxxopt="-fno-exceptions"
build --cxxopt="-fomit-frame-pointer"

# Disable sandbox environment because emsdk caches files by writing to
# home directory.
#build:wasm --spawn_strategy=local


#build:wasm_new --crosstool_top=//emscripten_toolchain:everything
#build:wasm_new --cpu=wasm
#build:wasm_new --host_crosstool_top=@bazel_tools//tools/cpp:toolchain

# This flag is needed to so that the bazel cache is not invalidated
# when running bazel via `yarn bazel`.
# See https://github.com/angular/angular/issues/27514.
build --incompatible_strict_action_env
run --incompatible_strict_action_env
