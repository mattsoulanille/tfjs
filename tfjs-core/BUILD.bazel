# Allow typescript rules in any package to reference this file
exports_files(["tsconfig.json"])
package(default_visibility = ["//visibility:public"])

load("@npm//@bazel/typescript:index.bzl", "ts_project", "ts_library")
load("@npm//@bazel/concatjs:index.bzl", "karma_web_test")
load("//:esbuild.bzl", "esbuild");
load("@build_bazel_rules_nodejs//:index.bzl", "js_library")


TEST_SRCS = ["src/setup_test.ts"]
# ts_library(
#     name = "tfjs-core_lib",
#     #module_name = "tensorflow/tfjs-core",
#     srcs = glob(["src/**/*.ts"], exclude = TEST_SRCS),
#     deps = [
#         "@npm//@types",
#         "@npm//seedrandom",
#     ],
# )

# ts_library(
#     name = "tfjs-core_test_lib",
#     testonly = True,
#     srcs = TEST_SRCS,
#     deps = [
#         "@npm//@types",
#         "@npm//seedrandom",
#         ":tfjs-core_lib",
#     ],
# )


ts_project(
    name = "tfjs-core_lib",
    #srcs = glob(["src/**/*.ts"], exclude=TEST_SRCS),
    srcs = glob(["src/**/*.ts"]),
    declaration = True,
    extends = "//:tsconfig.json",
    root_dir = "src",
    out_dir = "dist",
    incremental = True,
    source_map = True,
    tsconfig = "tsconfig.json",
    deps = [
        "@npm//@types",
        "@npm//seedrandom",
        "@npm//jasmine-core",
    ],
)

# # Due to a circular dependency with tfjs-core, we have to compile
# # 'setup_test.ts' separately. However, since we set 'out_dir' to 'dist',
# # the outputs of 'tfjs-core_lib' are not available at the same paths as their
# # input '.ts' files. To maintain compatability with the current yarn build, we
# # have to recompile all the sources to make sure they're available at their
# # expected paths when compiling 'setup_test.ts'.
# ts_project(
#     name = "tfjs-core_test_lib",
#     testonly = True,
#     srcs = glob(["src/**/*.ts"]),
#     declaration = True,
#     extends = "//:tsconfig.json",
#     root_dir = "src",
#     out_dir = "test",
#     incremental = True,
#     source_map = True,
#     tsconfig = "tsconfig.json",
#     deps = [
#         #":tfjs-core_lib",
#         "//tfjs-backend-cpu",
#         "@npm//@types",
#         "@npm//seedrandom",
#     ],
# )

esbuild(
    name = "tfjs-core_test_bundle",
    testonly = True,
    args = [
        "--tree-shaking=ignore-annotations",
    ],
    entry_point = "dist/setup_test.ts",
    sources_content = True,
    
    deps = [
        ":tfjs-core_lib",
        "//tfjs-backend-cpu",
    ],
    external = [
        # webworker tests
        "@tensorflow/tfjs",
    ]
)

esbuild(
    name = "tf-core.min",
    entry_point = "dist/index.ts",
    sources_content = True,
    minify = True,
    deps = [
        ":tfjs-core_lib",
    ],
    external = [
        "node-fetch",
        "util",
    ]
)

esbuild(
    name = "tf-core.node",
    entry_point = "dist/index.ts",
    sources_content = True,
    deps = [
        ":tfjs-core_lib",
    ],
    external = [
        "node-fetch",
        "util",
    ]
)

js_library(
    name = "tfjs-core",
    package_name = "@tensorflow/tfjs-core",
    srcs = [
        "package.json",
    ],
    deps = [
        ":tf-core.min",
        ":tf-core.node",
        ":tfjs-core_lib",
    ]
)

# ts_library(
#     name = "simple_test",
#     srcs = [
#         "simple_test.ts"
#     ],
#     deps = [
#         "@npm//jasmine",
#         "@npm//@types/jasmine",
#         "@npm//seedrandom",
#         "@npm//@types/seedrandom",
#     ]
# )



karma_web_test(
    name = "tfjs-core_test",

    srcs = [
        ":tfjs-core_test_bundle",
        #":simple_test"
    ],
    static_files = [
        # Listed here so sourcemaps are served
        ":tfjs-core_test_bundle",
    ]
    #config_file = "karma.conf.js",
)
